#	Copyright (c) 1989 AT&T
#	  All Rights Reserved  
#
#	THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF AT&T
#	The copyright notice above does not evidence any   
#	actual or intended publication of such source code.
#
#ident "%W%"

# 1989/01 AT&T-UEL
# To compose ISO 8859-1 characters
# Derived from: AT&T terminal compose sequences
# Notes:	"compose"

map sparse (88591.cpz) {

	define(compose "")	# compose character is cntrl T
	compose("" "")

	compose("  " " ")	# NBSP
	compose("\" " "\"")	# quotation mark
        compose(" \"" "\"")	# quotation mark
	compose("++" "#")	# number sign
	compose("' " "'")	# apostrophe
	compose(" '" "'")	# apostrophe
	compose("AA" "@")	# commercial at
	compose("((" "[")	# opening bracket
	compose("//" "\\")	# backslash
	compose("/<" "\\")	# backslash
	compose("</" "\\")	# backslash
	compose("))" "]")	# closing bracket
	compose("^ " "^")	# circumflex accent
	compose(" ^" "^")	# circumflex accent
	compose("> " "^")	# circumflex accent
	compose(" >" "^")	# circumflex accent
	compose("` " "`")	# grave accent
	compose(" `" "`")	# grave accent
	compose("(-" "{")	# opening brace
	compose("-(" "{")	# opening brace
	compose("/^" "|")	# vertical line
	compose("^/" "|")	# vertical line
	compose("LV" "|")	# vertical line
	compose("lv" "|")	# vertical line
	compose("VL" "|")	# vertical line
	compose("vl" "|")	# vertical line
	compose(")-" "}")	# closing brace
	compose("-)" "}")	# closing brace
	compose("~ " "~")	# tilde
	compose(" ~" "~")	# tilde
	compose("- " "~")	# tilde
	compose(" -" "~")	# tilde

	compose("!!" "¡")	# inverted !
	compose("c/" "¢")	# cent sign
	compose("/c" "¢")	# cent sign
	compose("C/" "¢")	# cent sign
	compose("/C" "¢")	# cent sign
	compose("c|" "¢")	# cent sign
	compose("|c" "¢")	# cent sign
	compose("C|" "¢")	# cent sign
	compose("|C" "¢")	# cent sign
	compose("l-" "£")	# pound sign
	compose("-l" "£")	# pound sign
	compose("L-" "£")	# pound sign
	compose("-L" "£")	# pound sign
	compose("l=" "£")	# pound sign
	compose("=l" "£")	# pound sign
	compose("L=" "£")	# pound sign
	compose("=L" "£")	# pound sign
	compose("xo" "¤")	# currency sign
	compose("ox" "¤")	# currency sign
	compose("XO" "¤")	# currency sign
	compose("OX" "¤")	# currency sign
	compose("xO" "¤")	# currency sign
	compose("Ox" "¤")	# currency sign
	compose("Xo" "¤")	# currency sign
	compose("oX" "¤")	# currency sign
	compose("x0" "¤")	# currency sign
	compose("0x" "¤")	# currency sign
	compose("X0" "¤")	# currency sign
	compose("0X" "¤")	# currency sign
	compose("y-" "¥")	# yen sign
	compose("-y" "¥")	# yen sign
	compose("Y-" "¥")	# yen sign
	compose("-Y" "¥")	# yen sign
	compose("y=" "¥")	# yen sign
	compose("=y" "¥")	# yen sign
	compose("Y=" "¥")	# yen sign
	compose("=Y" "¥")	# yen sign
	compose("!^" "¦")	# broken vertical bar
	compose("^!" "¦")	# broken vertical bar
	compose("||" "¦")	# broken vertical bar
	compose("VB" "¦")	# broken vertical bar
	compose("vb" "¦")	# broken vertical bar
	compose("BV" "¦")	# broken vertical bar
	compose("bv" "¦")	# broken vertical bar
	compose("So" "§")	# section sign
	compose("oS" "§")	# section sign
	compose("SO" "§")	# section sign
	compose("OS" "§")	# section sign
	compose("sO" "§")	# section sign
	compose("Os" "§")	# section sign
	compose("so" "§")	# section sign
	compose("os" "§")	# section sign
	compose("S0" "§")	# section sign
	compose("0S" "§")	# section sign
	compose("s0" "§")	# section sign
	compose("0s" "§")	# section sign
	compose("!s" "§")	# section sign
	compose("!S" "§")	# section sign
	compose("S!" "§")	# section sign
	compose("s!" "§")	# section sign

	compose("\"\"" "¨")	# diaeresis
	compose("cO" "©")	# copyright
	compose("Oc" "©")	# copyright
	compose("Co" "©")	# copyright
	compose("oC" "©")	# copyright
	compose("CO" "©")	# copyright
	compose("OC" "©")	# copyright
	compose("co" "©")	# copyright
	compose("oc" "©")	# copyright
	compose("c0" "©")	# copyright
	compose("0c" "©")	# copyright
	compose("C0" "©")	# copyright
	compose("0C" "©")	# copyright
	compose("a_" "ª")	# Female Ordinal
	compose("_a" "ª")	# Female Ordinal
	compose("A_" "ª")	# Female Ordinal
	compose("_A" "ª")	# Female Ordinal
	compose("<<" "«")	# left angle quotation mark
	compose("-," "¬")	# logical not
	compose(",-" "¬")	# logical not
	compose("--" "­")	# SHY 
	compose("RO" "®")	# registered trademark
	compose("OR" "®")	# registered trademark
	compose("-^" "¯")	# macron
	compose("^-" "¯")	# macron
	compose("_^" "¯")	# macron
	compose("^_" "¯")	# macron
	compose("__" "¯")	# macron

	compose("0^" "°")	# Degree sign
	compose("^0" "°")	# Degree sign
	compose("0*" "°")	# Degree sign
	compose("*0" "°")	# Degree sign
	compose("+-" "±")	# Plus minus
	compose("-+" "±")	# Plus minus
	compose("2^" "²")	# Superscript 2
	compose("^2" "²")	# Superscript 2
	compose("2S" "²")	# Superscript 2
	compose("S2" "²")	# Superscript 2
	compose("2s" "²")	# Superscript 2
	compose("s2" "²")	# Superscript 2
	compose("3^" "³")	# Superscript 3
	compose("^3" "³")	# Superscript 3
	compose("3S" "³")	# Superscript 3
	compose("S3" "³")	# Superscript 3
	compose("3s" "³")	# Superscript 3
	compose("s3" "³")	# Superscript 3
	compose("''" "´")	# acute accent
	compose("/u" "µ")	# micron sign
	compose("u/" "µ")	# micron sign
	compose("/U" "µ")	# micron sign
	compose("U/" "µ")	# micron sign
	compose("p!" "¶")	# paragraph sign
	compose("!p" "¶")	# paragraph sign
	compose("P!" "¶")	# paragraph sign
	compose("!P" "¶")	# paragraph sign
	compose(".^" "·")	# middle dot
	compose("^." "·")	# middle dot
	compose(".." "·")	# middle dot

	compose(",," "¸")	# cedilla
	compose("1^" "¹")	# Superscript 1
	compose("^1" "¹")	# Superscript 1
	compose("1s" "¹")	# Superscript 1
	compose("s1" "¹")	# Superscript 1
	compose("1S" "¹")	# Superscript 1
	compose("S1" "¹")	# Superscript 1
	compose("o_" "º")	# Masculine Ordinal
	compose("_o" "º")	# Masculine Ordinal
	compose("_O" "º")	# Masculine Ordinal
	compose("O_" "º")	# Masculine Ordinal
	compose(">>" "»")	# right angle quotation mark
	compose("14" "¼")	# one quarter
	compose("12" "½")	# one half
	compose("34" "¾")	# three quarters
	compose("??" "¿")	# inverted ?

	compose("A`" "À")	# A grave
	compose("`A" "À")	# A grave
	compose("A'" "Á")	# A acute
	compose("'A" "Á")	# A acute
	compose("A^" "Â")	# A circumflex
	compose("^A" "Â")	# A circumflex
	compose("A>" "Â")	# A circumflex
	compose(">A" "Â")	# A circumflex
	compose("A~" "Ã")	# A tilde
	compose("~A" "Ã")	# A tilde
	compose("A-" "Ã")	# A tilde
	compose("-A" "Ã")	# A tilde
	compose("A\"" "Ä")	# A umlaut
	compose("\"A" "Ä")	# A umlaut
	compose("A*" "Å")	# A circle
	compose("*A" "Å")	# A circle
	compose("AE" "Æ")	# AE dipthong
	compose("C," "Ç")	# C cedilla
	compose(",C" "Ç")	# C cedilla

	compose("E`" "È")	# E grave
	compose("`E" "È")	# E grave
	compose("E'" "É")	# E acute
	compose("'E" "É")	# E acute
	compose("E^" "Ê")	# E circumflex
	compose("^E" "Ê")	# E circumflex
	compose("E>" "Ê")	# E circumflex
	compose(">E" "Ê")	# E circumflex
	compose("E\"" "Ë")	# E umlaut
	compose("\"E" "Ë")	# E umlaut
	compose("I`" "Ì")	# I grave
	compose("`I" "Ì")	# I grave
	compose("I'" "Í")	# I acute
	compose("'I" "Í")	# I acute
	compose("I^" "Î")	# I circumflex
	compose("^I" "Î")	# I circumflex
	compose(">I" "Î")	# I circumflex
	compose("I>" "Î")	# I circumflex
	compose("I\"" "Ï")	# I umlaut
	compose("\"I" "Ï")	# I umlaut

	compose("-D" "Ð")	# capital Iclandic eth
	compose("D-" "Ð")	# capital Iclandic eth
	compose("N~" "Ñ")	# N tilde
	compose("~N" "Ñ")	# N tilde
	compose("N-" "Ñ")	# N tilde
	compose("-N" "Ñ")	# N tilde
	compose("O`" "Ò")	# O grave
	compose("`O" "Ò")	# O grave
	compose("O'" "Ó")	# O acute
	compose("'O" "Ó")	# O acute
	compose("O^" "Ô")	# O circumflex
	compose("^O" "Ô")	# O circumflex
	compose("O>" "Ô")	# O circumflex
	compose(">O" "Ô")	# O circumflex
	compose("O~" "Õ")	# O tilde
	compose("~O" "Õ")	# O tilde
	compose("O-" "Õ")	# O tilde
	compose("-O" "Õ")	# O tilde
	compose("O\"" "Ö")	# O umlaut
	compose("\"O" "Ö")	# O umlaut
	compose("xx" "×")	# muliiply

	compose("O/" "Ø")	# O slash
	compose("/O" "Ø")	# O slash
	compose("U`" "Ù")	# U grave
	compose("`U" "Ù")	# U grave
	compose("U'" "Ú")	# U acute
	compose("'U" "Ú")	# U acute
	compose("U^" "Û")	# U circumflex
	compose("^U" "Û")	# U circumflex
	compose("U>" "Û")	# U circumflex
	compose(">U" "Û")	# U circumflex
	compose("U\"" "Ü")	# U umlaut
	compose("\"U" "Ü")	# U umlaut
	compose("Y'" "Ý")	# Y acute
	compose("'Y" "Ý")	# Y acute
	compose("TH" "Þ")	# capital Iclandic thor
	compose("ss" "ß")	# sharp s

	compose("a`" "à")	# a grave
	compose("`a" "à")	# a grave
	compose("a'" "á")	# a acute
	compose("'a" "á")	# a acute
	compose("a^" "â")	# a circumflex
	compose("^a" "â")	# a circumflex
	compose("a>" "â")	# a circumflex
	compose(">a" "â")	# a circumflex
	compose("a~" "ã")	# a tilde
	compose("~a" "ã")	# a tilde
	compose("a-" "ã")	# a tilde
	compose("-a" "ã")	# a tilde
	compose("a\"" "ä")	# a umlaut
	compose("\"a" "ä")	# a umlaut
	compose("a*" "å")	# a circle
	compose("*a" "å")	# a circle
	compose("ae" "æ")	# ae dipthong
	compose("c," "ç")	# c cedilla
	compose(",c" "ç")	# c cedilla

	compose("e`" "è")	# e grave
	compose("`e" "è")	# e grave
	compose("e'" "é")	# e acute
	compose("'e" "é")	# e acute
	compose("e^" "ê")	# e circumflex
	compose("^e" "ê")	# e circumflex
	compose("e>" "ê")	# e circumflex
	compose(">e" "ê")	# e circumflex
	compose("e\"" "ë")	# e umlaut
	compose("\"e" "ë")	# e umlaut
	compose("i`" "ì")	# i grave
	compose("`i" "ì")	# i grave
	compose("i'" "í")	# i acute
	compose("'i" "í")	# i acute
	compose("i^" "î")	# i circumflex
	compose("^i" "î")	# i circumflex
	compose("i>" "î")	# i circumflex
	compose(">i" "î")	# i circumflex
	compose("i\"" "ï")	# i umlaut
	compose("\"i" "ï")	# i umlaut

	compose("-d" "ð")	# small Iclandic eth
	compose("d-" "ð")	# small Iclandic eth
	compose("n~" "ñ")	# n tilde
	compose("~n" "ñ")	# n tilde
	compose("n-" "ñ")	# n tilde
	compose("-n" "ñ")	# n tilde
	compose("o`" "ò")	# o grave
	compose("`o" "ò")	# o grave
	compose("o'" "ó")	# o acute
	compose("'o" "ó")	# o acute
	compose("o^" "ô")	# o circumflex
	compose("^o" "ô")	# o circumflex
	compose("o>" "ô")	# o circumflex
	compose(">o" "ô")	# o circumflex
	compose("o~" "õ")	# o tilde
	compose("~o" "õ")	# o tilde
	compose("o-" "õ")	# o tilde
	compose("-o" "õ")	# o tilde
	compose("o\"" "ö")	# o umlaut
	compose("\"o" "ö")	# o umlaut
	compose("-:" "÷")	# divides
	compose(":-" "÷")	# divides
	compose("-;" "÷")	# divides
	compose(";-" "÷")	# divides

	compose("o/" "ø")	# o slash
	compose("/o" "ø")	# o slash
	compose("u`" "ù")	# u grave
	compose("`u" "ù")	# u grave
	compose("u'" "ú")	# u acute
	compose("'u" "ú")	# u acute
	compose("u^" "û")	# u circumflex
	compose("^u" "û")	# u circumflex
	compose("u>" "û")	# u circumflex
	compose(">u" "û")	# u circumflex
	compose("u\"" "ü")	# u umlaut
	compose("\"u" "ü")	# u umlaut
	compose("y'" "ý")	# y acute
	compose("'y" "ý")	# y acute
	compose("th" "þ")	# small Iclandic thor
	compose("y\"" "ÿ")	# y umlaut
	compose("\"y" "ÿ")	# y umlaut
}
