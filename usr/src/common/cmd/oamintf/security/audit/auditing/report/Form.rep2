#ident	"@(#)oamintf:common/cmd/oamintf/security/audit/auditing/report/Form.rep2	1.1.7.2"
#ident  "$Header: Form.rep2 2.0 91/07/12 $"
#	Module Name: Form.rep2

form=Display Criteria for Event Log

framemsg=`readfile $INTFBASE/form.msg`
help=OPEN TEXT $INTFBASE/Text.itemhelp $LININFO
lifetime=longterm

close=`rm -f $REPERR /tmp/$VPID.replog /tmp/$VPID.privs /tmp/$VPID.tmpev /tmp/$VPID.obtypes /tmp/$VPID.events`

done=`test "$F1" = "union" && set -l REPARGS="$REPARGS -o";
	test -n "$F2" && set -l REPARGS="$REPARGS -e$EVENTS";
	test -n "$F3" && set -l REPARGS="$REPARGS -f$OBJECTS";
	test -n "$F4" && set -l REPARGS="$REPARGS -t$OBTYPES";
	test -n "$F5" && set -l REPARGS="$REPARGS -u$F5";
	test -n "$F6" && set -l REPARGS="$REPARGS -s$F6";
	test -n "$F7" && set -l REPARGS="$REPARGS -h$F7";
	if [ -n "$F8" ];
	then
		if [ "$F8" = "success" ];
		then
			set -l REPARGS="$REPARGS -as";
		else
			set -l REPARGS="$REPARGS -af";
		fi;
	fi;
	if [ "$ES" = "0" ];
	then
		test -n "$F9" && set -l REPARGS="$REPARGS -l$F9";
		test -n "${F10}" && set -l REPARGS="$REPARGS -p$PRIVS";
	fi;
	message -f "Displaying event logs. Please wait.";
	shell "$TFADMIN auditrpt $!REPARGS $!LOGFS" >/tmp/$VPID.replog 2>$REPERR;
	if [ "$RET" -ne "0" ];
	then
		set -l CMD="OPEN TEXT $OBJ_DIR/Text.repnok";
        elif [ -s "$REPERR" ];
        then
                set -l CMD="OPEN TEXT $OBJ_DIR/Text.repwok";
	else
		set -l CMD="OPEN TEXT $OBJ_DIR/Text.repok";
	fi`$CMD

# find out if Enhanced security is installed
`if [ -d /var/sadm/pkg/es ];
 then
	set -l ES=0;
 else
	set -l ES=1;
 fi`

# get event info (TYPES and CLASSES)
`valevt post |sed '/^$/d' >/tmp/$VPID.tmpev;
sed '/^[ 	].*$/d;/^$/d;s/alias //;s/ .*$//' /etc/security/audit/classes >>/tmp/$VPID.tmpev;
sort -u /tmp/$VPID.tmpev >/tmp/$VPID.events;`

# put object types in file for menu
`echo "f
c
b
d
p
s
h
m" >/tmp/$VPID.obtypes`

# get valid privs
`"$TFADMIN" cat /usr/include/sys/privilege.h | sed '/^#define	P_/ !d;/^#define	P_/ s/^.*P_//;s/	.*$//'| tr [A-Z] [a-z] > /tmp/$VPID.privs`

#F1
name=General display criteria:
lininfo=Form.rep2:gencrit
nrow=1
ncol=3
frow=1
fcol=29
rows=1
columns=14
value=intersection
rmenu={ union intersection }
menuonly=TRUE
invalidmsg= const "Error - Must enter either union or intersection."
fieldmsg= const "Enter either union or intersection."
 
#F2
name=Event type(s) or class(es):
lininfo=Form.rep2:event
nrow=2
ncol=3
frow=2
fcol=31
rows=1
columns=30
scroll=TRUE
rmenu=OPEN MENU $OBJ_DIR/Menu.events
valid=`message -f "Please Wait.";
	if [ -n "$F2" ];
	then
		echo "$F2" | set -l EVENTS;
		if regex -v "$F2" '.*,.*';
		then
			echo "$F2" |sed 's/,/ /g' | set -l GF 2;
			valforloop "$GF2" "grep \$i /tmp/$VPID.events";
		else
			fmlgrep "$F2" /tmp/$VPID.events;
		fi;
	fi`
invalidmsg=const "Error - Must enter one or more valid event types or classes."
fieldmsg= const "Press the CHOICES function key. Press SAVE when you complete the form."

#F3
name=Object(s):
lininfo=Form.rep2:objects
nrow=3
ncol=3
frow=3
fcol=14
rows=1
columns=35
scroll=TRUE
valid=`if [ -n "$F3" ];
	then
		echo "$F3" | set -l OBJECTS;
		if regex -v "$F3" '.*,.*';
		then
			echo "$F3" | sed 's/,/ /g' | set -l EF3;
			valforloop "$EF3" "regex -v \$i '^/[^ :]*$";
		else
			regex -v "$F3" '^/[^ :]*$';
		fi;
	fi`
invalidmsg= const "Error - Must enter one or more  full pathname(s)." 
fieldmsg= const "Enter one or more full pathname(s)." 

#F4
name=Object type(s):
lininfo=Form.rep2:types
nrow=4
ncol=3
frow=4
fcol=19
rows=1
columns=12
scroll=TRUE
rmenu=OPEN MENU $OBJ_DIR/Menu.obtypes
valid=`if [ -n "$F4" ];
	then
		echo "$F4" | set -l OBTYPES;
		if regex -v "$EF4" '.*,.*';
		then
			echo "$F4" | sed 's/,/ /g' | set -l EF4;
			valforloop "$EF4" "grep \$i /tmp/$VPID.obtypes";
		else
			fmlgrep "$F4" /tmp/$VPID.obtypes;
		fi;
	fi`
invalidmsg= const "Error - Must enter one or more of: f, c, b, d, p, s, h, or m ."
fieldmsg= const "Enter one or more of: f, c, b, d, p, s, h, or m ."

#F5
name=User(s):
lininfo=Form.rep2:users
nrow=5
ncol=3
frow=5
fcol=12
rows=1
columns=20
scroll=TRUE
fieldmsg= const "Enter one or more valid user identities."

#F6
name=Starting time of events:
lininfo=Form.rep2:stime
nrow=6
ncol=3
frow=6
fcol=28
rows=1
columns=15
valid=`test -z "$F6" || regex -v "$F6" '[0-9]+$'`
invalidmsg= const "Error - Must enter a valid date in the format: [mmdd]HHMM."
fieldmsg= const "Enter a valid date in the format: [mmdd]HHMM."

#F7
name=Ending time of events:
lininfo=Form.rep2:etime
nrow=7
ncol=3
frow=7
fcol=26
rows=1
columns=15
valid=`test -z "$F7" || regex -v "$F7" '[0-9]+$'`
invalidmsg= const "Error - Must enter a valid date in the format: [mmdd]HHMM."
fieldmsg= const "Enter a valid date in the format: [mmdd]HHMM."

#F8
name=Outcome of events:
lininfo=Form.rep2:outcome
nrow=8
ncol=3
frow=8
fcol=22
rows=1
columns=8
rmenu={ success failure }
valid=`if [ -n "$F8" ];
	then
		test "$F8" = "success" -o "$F8" = "failure";
	fi`
invalidmsg= const "Error - Must enter either success or failure."
fieldmsg= const "Enter either success or failure."

#F9
name=Level or level range:
lininfo=Form.rep2:levels
nrow=9
ncol=3
frow=9
fcol=25
rows=1
columns=15
scroll=TRUE
fieldmsg= const "Enter a valid level name or level range (levelmin-levelmax)."

#F10
name=Privilege(s):
lininfo=Form.rep2:privs
nrow=10
ncol=3
frow=10
fcol=17
rows=1
columns=15
scroll=TRUE
rmenu=OPEN MENU $OBJ_DIR/Menu.privs
valid=`echo "${F10}" | sed 's/,/ /g' | set -l INAMES;
	if [ -n "$INAMES" ];
	then
		echo "$INAMES" | sed 's/ /:/g' |set -l FINAMES;
		echo "$INAMES" | sed 's/ /,/g' |set -l PRIVS;
		if regex -v "$INAMES" '.* .*';
		then
			valforloop "$INAMES" "grep \$i /tmp/$VPID.privs";
		else
			grep $INAMES /tmp/$VPID.privs;
		fi;
	fi`
invalidmsg= const "Error - Must enter one or more valid privileges."
fieldmsg= const "Enter one or more valid privileges."
